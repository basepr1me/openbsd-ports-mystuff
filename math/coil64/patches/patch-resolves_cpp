_N is collides with ctypes.h

Index: resolves.cpp
--- resolves.cpp.orig
+++ resolves.cpp
@@ -971,7 +971,7 @@ void getMultilayerN_Foil(double D, double w, double t,
     result->five = Rdca;
 }
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-void getMultilayerI_Foil(double D, double w, double t, double ins, int _N, _CoilResult *result) {
+void getMultilayerI_Foil(double D, double w, double t, double ins, int _M, _CoilResult *result) {
     D = D / 10;
     w = w / 10;
     t = t / 10;
@@ -980,7 +980,7 @@ void getMultilayerI_Foil(double D, double w, double t,
     double k = ins + t;
     double r0 = (D + t) / 2;
     double Ltotal = 0;
-    for (int N = 1; N <= _N; N++) {
+    for (int N = 1; N <= _M; N++) {
         double ny = r0 + k * (N - 1);
         double Lns = Mut(ny, ny, g, 0);
         double M = 0;
@@ -997,9 +997,9 @@ void getMultilayerI_Foil(double D, double w, double t,
         }
         Ltotal += Lns + M;
     }
-    double th = k * (_N - 1);
+    double th = k * (_M - 1);
     double Do = (D + 2 * th) *10;
-    double Length_spiral = find_actual_spiral_length(_N, D, k) * 10;
+    double Length_spiral = find_actual_spiral_length(_M, D, k) * 10;
     double Resistivity_cu = mtrl[Cu][Rho]*1e2;
     double Resistivity_al = mtrl[Al][Rho]*1e2;
     double Rdcc = (Resistivity_cu * Length_spiral) / (w * t); // resistance of the copper foil
@@ -1138,17 +1138,17 @@ void getSpiralN(double I, double Di, double dw, double
     result->thd = Do;
 }
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-void getSpiralI(double Do, double Di, double dw, int _N, _CoilResult *result) {
+void getSpiralI(double Do, double Di, double dw, int _M, _CoilResult *result) {
 
     Di = Di / 10;
     Do = Do / 10;
     dw = dw / 10;
     double g = exp(-0.25) * dw / 2;
     double w = (Do - Di) / 2;
-    double k = w / (_N - 1);
+    double k = w / (_M - 1);
     double r0 = (Di + dw) / 2;
     double Ltotal = 0;
-    for (int N = 1; N < _N; N++) {
+    for (int N = 1; N < _M; N++) {
         double ny = r0 + k * (N - 1);
         double Lns = Mut(ny, ny, g, 0);
         double M = 0;
@@ -1160,7 +1160,7 @@ void getSpiralI(double Do, double Di, double dw, int _
         }
         Ltotal += Lns + M;
     }
-    double Length_spiral = find_actual_spiral_length(_N, Di, k) * 10;
+    double Length_spiral = find_actual_spiral_length(_M, Di, k) * 10;
     result->N = Ltotal;
     result->sec = Length_spiral / 1000;
 }
