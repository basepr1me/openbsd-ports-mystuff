conflicts with our sys/types.h major macro

Index: pcbnew/import_gfx/dxf_import_plugin.cpp
--- pcbnew/import_gfx/dxf_import_plugin.cpp.orig
+++ pcbnew/import_gfx/dxf_import_plugin.cpp
@@ -587,7 +587,7 @@ void DXF_IMPORT_PLUGIN::addEllipse( const DL_EllipseDa
     // For now, we assume ellipses in the XY plane.
 
     VECTOR2D center( mapX( centerCoords.x ), mapY( centerCoords.y ) );
-    VECTOR2D major( mapX( majorCoords.x ), mapY( majorCoords.y ) );
+    VECTOR2D majorA( mapX( majorCoords.x ), mapY( majorCoords.y ) );
 
     // DXF elliptical arcs store their angles in radians (unlike circular arcs which use degrees)
     // The arcs wind CCW as in KiCad.  The end angle must be greater than the start angle, and if
@@ -602,12 +602,13 @@ void DXF_IMPORT_PLUGIN::addEllipse( const DL_EllipseDa
         endAngle += ANGLE_360;
 
     // Angles are relative to major axis
-    startAngle -= EDA_ANGLE( major );
-    endAngle -= EDA_ANGLE( major );
+    startAngle -= EDA_ANGLE( majorA );
 
+    endAngle -= EDA_ANGLE( majorA );
+
     if( aData.ratio == 1.0 )
     {
-        double radius = major.EuclideanNorm();
+        double radius = majorA.EuclideanNorm();
 
         if( startAngle == endAngle )
         {
@@ -627,7 +628,7 @@ void DXF_IMPORT_PLUGIN::addEllipse( const DL_EllipseDa
     // TODO: testcases for negative extrusion vector; handle it here
 
     std::vector<BEZIER<double>> splines;
-    ELLIPSE<double> ellipse( center, major, aData.ratio, startAngle, endAngle );
+    ELLIPSE<double> ellipse( center, majorA, aData.ratio, startAngle, endAngle );
 
     TransformEllipseToBeziers( ellipse, splines );
 
@@ -641,8 +642,8 @@ void DXF_IMPORT_PLUGIN::addEllipse( const DL_EllipseDa
         bufferToUse->AddSpline( b.Start, b.C1, b.C2, b.End, lineWidth );
 
     // Naive bounding
-    updateImageLimits( center + major );
-    updateImageLimits( center - major );
+    updateImageLimits( center + majorA );
+    updateImageLimits( center - majorA );
 }
 
 
